
DROP TABLE IF EXISTS order_layers;
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS burger_layers;
DROP TABLE IF EXISTS cart_items;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS ingredients;
CREATE TABLE ingredients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    category VARCHAR(50) NOT NULL,
    price DECIMAL(10,2) NOT NULL CHECK (price > 0),
    description VARCHAR(500),
    image_url VARCHAR(255),
    is_available BOOLEAN NOT NULL DEFAULT TRUE,
    sort_order INT
);

DROP TABLE IF EXISTS cart_items;
CREATE TABLE cart_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    ingredient_id BIGINT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP,
    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
);

DROP TABLE IF EXISTS burger_layers;
CREATE TABLE burger_layers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_item_id BIGINT NOT NULL,
    ingredient_id BIGINT NOT NULL,
    layer_order INT NOT NULL CHECK (layer_order > 0),
    quantity INT NOT NULL DEFAULT 1 CHECK (quantity > 0),
    unit_price DECIMAL(10,2),
    FOREIGN KEY (cart_item_id) REFERENCES cart_items(id) ON DELETE CASCADE,
    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
);

DROP TABLE IF EXISTS orders;
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_number VARCHAR(50) NOT NULL UNIQUE,
    customer_name VARCHAR(100) NOT NULL,
    customer_email VARCHAR(100),
    customer_phone VARCHAR(20),
    total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount > 0),
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP
);

DROP TABLE IF EXISTS order_items;
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL,
    ingredient_id BIGINT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
);

DROP TABLE IF EXISTS order_layers;
CREATE TABLE order_layers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_item_id BIGINT NOT NULL,
    ingredient_id BIGINT NOT NULL,
    layer_order INT NOT NULL CHECK (layer_order > 0),
    quantity INT NOT NULL DEFAULT 1 CHECK (quantity > 0),
    unit_price DECIMAL(10,2),
    FOREIGN KEY (order_item_id) REFERENCES order_items(id) ON DELETE CASCADE,
    FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
);

DROP INDEX IF EXISTS idx_ingredients_category;
CREATE INDEX idx_ingredients_category ON ingredients(category);
DROP INDEX IF EXISTS idx_ingredients_available;
CREATE INDEX idx_ingredients_available ON ingredients(is_available);
DROP INDEX IF EXISTS idx_cart_items_session;
CREATE INDEX idx_cart_items_session ON cart_items(session_id);
DROP INDEX IF EXISTS idx_cart_items_ingredient;
CREATE INDEX idx_cart_items_ingredient ON cart_items(ingredient_id);
DROP INDEX IF EXISTS idx_orders_customer_email;
CREATE INDEX idx_orders_customer_email ON orders(customer_email);
DROP INDEX IF EXISTS idx_orders_status;
CREATE INDEX idx_orders_status ON orders(status);
DROP INDEX IF EXISTS idx_orders_created_at;
CREATE INDEX idx_orders_created_at ON orders(created_at);
DROP INDEX IF EXISTS idx_order_items_order_id;
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
DROP INDEX IF EXISTS idx_order_items_ingredient_id;
CREATE INDEX idx_order_items_ingredient_id ON order_items(ingredient_id);

